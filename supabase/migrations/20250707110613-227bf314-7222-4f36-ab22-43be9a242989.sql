-- ุฅูุดุงุก ุฌุฏูู ุงููุณุชุฎุฏููู ูุน ุงูุฃุฏูุงุฑ
CREATE TABLE public.profiles (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  role TEXT DEFAULT 'user' CHECK (role IN ('admin', 'user')),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- ุฅูุดุงุก ุฌุฏูู ุฅุนุฏุงุฏุงุช ุงููููุน
CREATE TABLE public.site_settings (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  key TEXT NOT NULL UNIQUE,
  value JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- ุฅูุดุงุก ุฌุฏูู ุงูุฎุฏูุงุช
CREATE TABLE public.services (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  icon TEXT,
  features TEXT[],
  is_active BOOLEAN DEFAULT true,
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- ุฅูุดุงุก ุฌุฏูู ุงูุชููููุงุช
CREATE TABLE public.testimonials (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  content TEXT NOT NULL,
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  is_active BOOLEAN DEFAULT true,
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- ุฅูุดุงุก ุฌุฏูู ูุนุฑุถ ุงูุตูุฑ
CREATE TABLE public.gallery_items (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT,
  image_url TEXT NOT NULL,
  description TEXT,
  is_active BOOLEAN DEFAULT true,
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- ุชูุนูู RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.site_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.gallery_items ENABLE ROW LEVEL SECURITY;

-- ุณูุงุณุงุช ุงูุฃูุงู ูููููุงุช ุงูุดุฎุตูุฉ
CREATE POLICY "Users can view their own profile" 
ON public.profiles FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own profile" 
ON public.profiles FOR UPDATE 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" 
ON public.profiles FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- ุณูุงุณุงุช ููุฅุนุฏุงุฏุงุช (ูุฑุงุกุฉ ููุฌููุนุ ุชุนุฏูู ููุฃุฏูู ููุท)
CREATE POLICY "Anyone can view site settings" 
ON public.site_settings FOR SELECT 
USING (true);

CREATE POLICY "Only admins can modify site settings" 
ON public.site_settings FOR ALL 
USING (EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

-- ุณูุงุณุงุช ููุฎุฏูุงุช
CREATE POLICY "Anyone can view active services" 
ON public.services FOR SELECT 
USING (is_active = true OR EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Only admins can modify services" 
ON public.services FOR ALL 
USING (EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

-- ุณูุงุณุงุช ููุชููููุงุช
CREATE POLICY "Anyone can view active testimonials" 
ON public.testimonials FOR SELECT 
USING (is_active = true OR EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Only admins can modify testimonials" 
ON public.testimonials FOR ALL 
USING (EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

-- ุณูุงุณุงุช ููุนุฑุถ ุงูุตูุฑ
CREATE POLICY "Anyone can view active gallery items" 
ON public.gallery_items FOR SELECT 
USING (is_active = true OR EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Only admins can modify gallery items" 
ON public.gallery_items FOR ALL 
USING (EXISTS (
  SELECT 1 FROM public.profiles 
  WHERE user_id = auth.uid() AND role = 'admin'
));

-- ุฏุงูุฉ ุชุญุฏูุซ ุงูุทูุงุจุน ุงูุฒูููุฉ
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ุชุทุจูู ุงูุฏุงูุฉ ุนูู ุงูุฌุฏุงูู
CREATE TRIGGER update_profiles_updated_at
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_site_settings_updated_at
    BEFORE UPDATE ON public.site_settings
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_services_updated_at
    BEFORE UPDATE ON public.services
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_testimonials_updated_at
    BEFORE UPDATE ON public.testimonials
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_gallery_items_updated_at
    BEFORE UPDATE ON public.gallery_items
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- ุฏุงูุฉ ุฅูุดุงุก ุงูููู ุงูุดุฎุตู ุชููุงุฆูุงู
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.profiles (user_id, full_name, role)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data ->> 'full_name', NEW.email),
    CASE 
      WHEN NEW.email = 'admin@vib.com' THEN 'admin'
      ELSE 'user'
    END
  );
  RETURN NEW;
END;
$$;

-- ุชุทุจูู ุงูุฏุงูุฉ ุนูุฏ ุฅูุดุงุก ูุณุชุฎุฏู ุฌุฏูุฏ
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- ุฅุฏุฑุงุฌ ุจูุงูุงุช ุฃุณุงุณูุฉ ููุฅุนุฏุงุฏุงุช
INSERT INTO public.site_settings (key, value) VALUES 
('site_title', '"VIB - ุฑุญูุงุช ููููุฉ ูููุฒุฉ"'),
('site_description', '"ุฎุฏูุงุช ุญุฌูุฒุงุช ูุฑุญูุงุช ููููุฉ VIP ูุน ุชุฌุงุฑุจ ุงุณุชุซูุงุฆูุฉ"'),
('contact_phone', '"+201234567890"'),
('contact_email', '"info@vib.com"'),
('social_media', '{"facebook": "", "instagram": "", "twitter": ""}');

-- ุฅุฏุฑุงุฌ ุฎุฏูุงุช ุฃุณุงุณูุฉ
INSERT INTO public.services (title, description, icon, features, sort_order) VALUES 
('ุฑุญูุงุช ููููุฉ VIP', 'ุฑุญูุงุช ูุงุฎุฑุฉ ุนูู ุงูููู ูุน ุฎุฏูุฉ ูุชููุฒุฉ', '๐ข', ARRAY['ุฎุฏูุฉ VIP', 'ุทุนุงู ูุงุฎุฑ', 'ููุณููู ุญูุฉ'], 1),
('ุญุฌูุฒุงุช ููุงุฏู', 'ุญุฌุฒ ุฃูุถู ุงูููุงุฏู ุจุฃุณุนุงุฑ ูููุฒุฉ', '๐จ', ARRAY['ุฃุณุนุงุฑ ูุฎูุถุฉ', 'ุฎุฏูุฉ 24/7', 'ุฅูุบุงุก ูุฌุงูู'], 2),
('ุฑุญูุงุช ุณูุงุญูุฉ', 'ุจุฑุงูุฌ ุณูุงุญูุฉ ูุชูุงููุฉ ูุน ูุฑุดุฏูู ูุชุฎุตุตูู', '๐บ๏ธ', ARRAY['ูุฑุดุฏ ุณูุงุญู', 'ูุณุงุฆู ููู ูุฑูุญุฉ', 'ุจุฑุงูุฌ ูุฎุตุตุฉ'], 3);

-- ุฅุฏุฑุงุฌ ุชููููุงุช ุฃุณุงุณูุฉ
INSERT INTO public.testimonials (name, content, rating, sort_order) VALUES 
('ุฃุญูุฏ ูุญูุฏ', 'ุฎุฏูุฉ ููุชุงุฒุฉ ูุฑุญูุฉ ูุง ุชููุณู! ูุฑูู ูุญุชุฑู ูููุธู', 5, 1),
('ูุงุทูุฉ ุนูู', 'ุชุฌุฑุจุฉ ุฑุงุฆุนุฉ ูุน ูุฑูู VIB. ุฃูุตุญ ุงูุฌููุน ุจุชุฌุฑุจุฉ ุฎุฏูุงุชูู', 5, 2),
('ูุญููุฏ ุญุณู', 'ุฑุญูุฉ ููููุฉ ูููุฒุฉ ูุน ุฎุฏูุฉ ูุงุฎุฑุฉ. ุดูุฑุงู ููุฑูู ุงูุนูู', 5, 3);